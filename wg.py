import requests
import json
import time
import logging
from datetime import datetime
from dotenv import load_dotenv
import os
import argparse
import matplotlib.pyplot as plt
from gtts import gTTS
import playsound

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env
load_dotenv()

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å OpenWeatherMap API
def get_weather_data(city, api_key):
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric"
        response = requests.get(url, timeout=10)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout
        response.raise_for_status()  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ HTTP
        return response.json()
    except requests.exceptions.RequestException as e:
        logging.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        return None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏û‡∏≤‡∏¢‡∏∏
def check_storm_condition(weather_data):
    try:
        weather = weather_data['weather'][0]['main']
        temp = weather_data['main']['temp']
        wind_speed = weather_data['wind']['speed']
        storm_warning = False
        alert_level = None

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏≤‡∏¢‡∏∏‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if weather == "Thunderstorm" or wind_speed > 15:
            storm_warning = True
            alert_level = "‡∏™‡∏π‡∏á"
        elif weather == "Rain" or wind_speed > 10:
            storm_warning = True
            alert_level = "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
        elif weather == "Clear" and temp > 40:
            storm_warning = True
            alert_level = "‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô"
        
        return storm_warning, weather, temp, wind_speed, alert_level

    except KeyError as e:
        logging.error(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return False, None, None, None, None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô LINE Notify
def send_line_notify(message, token):
    headers = {'Authorization': 'Bearer ' + token}
    payload = {'message': message}
    try:
        response = requests.post('https://notify-api.line.me/api/notify', headers=headers, data=payload, timeout=10)
        response.raise_for_status()
        return response.status_code
    except requests.exceptions.RequestException as e:
        logging.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: {e}")
        return None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
def create_alert_message(city, weather, temp, wind_speed, alert_level):
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    message = f"‚ö†Ô∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏û‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô {city} ‚ö†Ô∏è\n"
    message += f"‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_time}\n"
    message += f"‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®: {weather}\n"
    message += f"‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: {temp}¬∞C\n"
    message += f"‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏•‡∏°: {wind_speed} m/s\n"
    message += f"‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏†‡∏±‡∏¢: {alert_level}\n"
    message += "‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°!"
    return message

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
def create_weather_report(city, weather_data):
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    message = f"üåç ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô {city} üåç\n"
    message += f"‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_time}\n"
    message += f"‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®: {weather_data['weather'][0]['description']}\n"
    message += f"‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: {weather_data['main']['temp']}¬∞C\n"
    message += f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: {weather_data['main']['humidity']}%\n"
    message += f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô: {weather_data['main']['pressure']} hPa\n"
    message += f"‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏•‡∏°: {weather_data['wind']['speed']} m/s\n"
    message += f"‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏•‡∏°: {weather_data['wind']['deg']}¬∞\n"
    return message

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
def log_weather_data(city, weather, temp, wind_speed, alert_level):
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = {
        'time': current_time,
        'city': city,
        'weather': weather,
        'temp': temp,
        'wind_speed': wind_speed,
        'alert_level': alert_level
    }
    try:
        with open('weather_log.json', 'a') as f:
            f.write(json.dumps(log_entry) + "\n")
        logging.info("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    except IOError as e:
        logging.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏≤‡∏ü
def plot_weather_data(log_file='weather_log.json'):
    try:
        times, temps, wind_speeds = [], [], []

        with open(log_file, 'r') as f:
            for line in f:
                entry = json.loads(line)
                times.append(entry['time'])
                temps.append(entry['temp'])
                wind_speeds.append(entry['wind_speed'])

        plt.figure(figsize=(10, 5))
        plt.plot(times, temps, label='Temperature (¬∞C)', color='red')
        plt.plot(times, wind_speeds, label='Wind Speed (m/s)', color='blue')
        plt.xlabel('Time')
        plt.ylabel('Value')
        plt.title('Weather Data Over Time')
        plt.legend()
        plt.xticks(rotation=45)
        plt.tight_layout()
        plt.show()

    except Exception as e:
        logging.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü: {e}")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏® (AQI)
def get_air_quality_data(lat, lon, api_key):
    try:
        url = f"http://api.openweathermap.org/data/2.5/air_pollution?lat={lat}&lon={lon}&appid={api_key}"
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logging.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®: {e}")
        return None

def check_air_quality(aqi_data):
    try:
        aqi = aqi_data['list'][0]['main']['aqi']
        aqi_levels = {
            1: "‡∏î‡∏µ‡∏°‡∏≤‡∏Å",
            2: "‡∏î‡∏µ",
            3: "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á",
            4: "‡πÅ‡∏¢‡πà",
            5: "‡πÅ‡∏¢‡πà‡∏°‡∏≤‡∏Å"
        }
        return aqi, aqi_levels.get(aqi, "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö")
    except KeyError as e:
        logging.error(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• AQI ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return None, None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á
def send_voice_alert(message, language='th'):
    try:
        tts = gTTS(text=message, lang=language)
        tts.save("alert.mp3")
        playsound.playsound("alert.mp3")
        logging.info("‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    except Exception as e:
        logging.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á: {e}")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏û‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
def storm_warning_system(city, api_key, line_token):
    logging.info(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô {city}...")
    weather_data = get_weather_data(city, api_key)

    if weather_data:
        storm_warning, weather, temp, wind_speed, alert_level = check_storm_condition(weather_data)

        if storm_warning:
            logging.warning(f"‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏†‡∏±‡∏¢: ‡∏û‡∏≤‡∏¢‡∏∏‡∏£‡∏∞‡∏î‡∏±‡∏ö {alert_level} ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤!")
            message = create_alert_message(city, weather, temp, wind_speed, alert_level)
            status = send_line_notify(message, line_token)
            send_voice_alert(message)

            log_weather_data(city, weather, temp, wind_speed, alert_level)

            if status == 200:
                logging.info("‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            else:
                logging.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ")
        else:
            logging.info("‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏≤‡∏¢‡∏∏‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô")

        weather_report = create_weather_report(city, weather_data)
        send_line_notify(weather_report, line_token)
    else:
        logging.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
def start_weather_check(city, api_key, line_token, interval=3600):
    while True:
        storm_warning_system(city, api_key, line_token)
        time.sleep(interval)

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏û‡∏≤‡∏¢‡∏∏")
    parser.add_argument("--city", type=str, default="Changwat Chachoengsao", help="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
    parser.add_argument("--interval", type=int, default=1800, help="‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)")
    parser.add_argument("--plot", action="store_true", help="‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®")
    args = parser.parse_args()

    city = args.city
    interval = args.interval
    api_key = os.getenv("API_KEY")
    line_token = os.getenv("LINE_TOKEN")

    if not api_key or not line_token:
        logging.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà API Key ‡πÅ‡∏•‡∏∞ LINE Token ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .env")
    else:
        if args.plot:
            plot_weather_data()
        else:
            start_weather_check(city, api_key, line_token, interval)